apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply from: "$rootProject.projectDir/buildsystem/config.gradle"
apply from: "$rootProject.projectDir/buildsystem/version.gradle"
apply from: "$rootProject.projectDir/buildsystem/checkstyle.gradle"

def configuration = ext.configuration;

android {
  compileSdkVersion configuration.compileSdkVersion
  buildToolsVersion configuration.buildToolsVersion

  defaultConfig {
    minSdkVersion configuration.minimumSdkVersion
    targetSdkVersion configuration.targetSdkVersion

    applicationId configuration.applicationId

    multiDexEnabled true

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath false
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/rxjava.properties'
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
    disable 'InvalidPackage'
    disable 'OldTargetApi'
  }

  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }

    unitTests {
      includeAndroidResources = true
    }
  }

  flavorDimensions "default"

  productFlavors {
    mock {
      buildConfigField("boolean", "IS_MOCK", "true")
    }

    prod {
      buildConfigField("boolean", "IS_MOCK", "false")
    }
  }

  buildTypes {
    debug {
      debuggable true
      testCoverageEnabled = true
      signingConfig signingConfigs.debug
    }

    release {
      debuggable false
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  signingConfigs {
    release {
      storeFile file("debug.keystore")
    }
  }

  android.variantFilter { variant ->
    def isRelease = variant.getBuildType().getName() == "release"
    def isMock = variant.getFlavors().get(0).getName() == "mock"

    if (isRelease && isMock) {
      variant.setIgnore(true)
    }
  }

  applicationVariants.all { variant ->
    def appName = configuration.applicationName
    def flavor = variant.mergedFlavor
    def isRelease = variant.getBuildType().getName() == "release"
    def isMock = variant.getFlavorName() == "mock"
    def isDebug = variant.getBuildType().getName() == "debug"

    if (isRelease) {
      flavor.versionCode = gitVersionCode
    } else {
      flavor.versionCode = gitVersionCodeTime
    }

    flavor.versionName = gitVersionName

    if (isMock) {
      flavor.applicationIdSuffix = ".mock"
      flavor.versionNameSuffix = "-mock"
      appName += "-mock"
    } else if (isDebug) {
      flavor.applicationIdSuffix = ".debug"
      flavor.versionNameSuffix = "-debug"
      appName += "-debug"
    }

    variant.resValue("string", "app_name", appName)

    variant.outputs.all { output ->
      def parentFile = output.outputFile.parent
      def fileName = output.outputFile.name.replace("presentation", "remotecraft")
      outputFileName = new File(parentFile, fileName)
    }
  }
}

configurations.all {
  resolutionStrategy {
    force "${rootProject.ext.presentationDependencies.androidAnnotations}"
  }
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "started", "skipped", "passed", "failed"
    showStandardStreams true
  }
}

dependencies {
  def library = rootProject.ext.presentationDependencies;
  def libraryTest = rootProject.ext.presentationTestDependencies;

  implementation project(':domain')
  implementation project(':data')
  implementation project(':infrastructure')

  implementation "${library.timber}"
  annotationProcessor "${library.daggerCompiler}"
  implementation "${library.dagger}"
  implementation "${library.rxJava}"
  implementation "${library.rxAndroid}"
  compileOnly "${library.javaxAnnotation}"
  implementation "${library.lightweightStreamApi}"
  implementation "${library.qrCodeReader}"
  compileOnly "${library.autovalue}"
  annotationProcessor "${library.autovalue}"
  annotationProcessor "${library.autovalueParcel}"
  implementation "${library.design}"
  implementation "${library.appCompat}"
  implementation "${library.recyclerView}"
  implementation "${library.cardView}"
  implementation "${library.androidAnnotations}"
  annotationProcessor "${library.butterKnifeCompiler}"
  implementation "${library.butterKnife}"
  implementation "${library.picasso}"
  implementation "${library.materialDesignColors}"
  implementation "${library.androidSpinKit}"
  implementation "${library.floatingActionButton}"
  implementation "${library.kenBurnsView}"

  checkstyle "${library.checkstyle}"

  debugImplementation "${libraryTest.jUnit}"
  debugImplementation "${libraryTest.assertJ}"
  debugImplementation "${libraryTest.mockito}"
  debugImplementation "${libraryTest.robolectric}"
  debugImplementation "${libraryTest.openGlApi}"

  androidTestCompile "${libraryTest.espresso}"
  androidTestCompile "${libraryTest.conditionWatcher}"
}
